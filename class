https://www.runoob.com/cplusplus/cpp-copy-constructor.html

C++类定义

class classname  //关键字 类名
{
	Access specifiers:	//访问修饰符：private/public/protected
		Date members/variables;		//变量
		Member functions(){}	//方法
};	//分号结束一个类

类成员函数
	范围解析运算符 ::
	实例
	#include <iostream>
 
	using namespace std;
 
	class Box
	{
   		public:
      			double length;         // 长度
      			double breadth;        // 宽度
      			double height;         // 高度
 
      // 成员函数声明
      			double getVolume(void);
      			void setLength( double len );
     			void setBreadth( double bre );
      			void setHeight( double hei );
	};
 
	// 成员函数定义
	double Box::getVolume(void)
	{
	    return length * breadth * height;
	}
 
	void Box::setLength( double len )
	{
	    length = len;
	}
 
	void Box::setBreadth( double bre )
	{
	    breadth = bre;
	}
 
	void Box::setHeight( double hei )
	{
	    height = hei;
	}
 
	// 程序的主函数
	int main( )
	{
	   Box Box1;                // 声明 Box1，类型为 Box
	   Box Box2;                // 声明 Box2，类型为 Box
	   double volume = 0.0;     // 用于存储体积
 
	   // box 1 详述
	   Box1.setLength(6.0); 
	   Box1.setBreadth(7.0); 
	   Box1.setHeight(5.0);
 
	   // box 2 详述
	   Box2.setLength(12.0); 
	   Box2.setBreadth(13.0); 
	   Box2.setHeight(10.0);
 
	   // box 1 的体积
	   volume = Box1.getVolume();
	   cout << "Box1 的体积：" << volume <<endl;
 
	   // box 2 的体积
	   volume = Box2.getVolume();
	   cout << "Box2 的体积：" << volume <<endl;
	   return 0;
	}

	当上面的代码被编译和执行时，它会产生下列结果：
	Box1 的体积： 210
	Box2 的体积： 1560
类访问修饰符
	class Base {
	   public:
	  // 公有成员：在程序中类的外部是可访问的。您可以不使用任何成员函数来设置和获取公有变量的值
	   protected:
	  // 受保护成员：protected（受保护）成员变量或函数与私有成员十分相似，但有一点不同，protected（受保护）成员在派生类（即子类）中是可访问的。
	   private:
  	  // 私有成员：私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。默认情况下，类的所有成员都是私有的。
	};
类构造函数 & 析构函数
	类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。
	类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。

	class Line
	{
   		public:
   			Line();  // 这是构造函数
			~Line(); // 这是析构函数
	};
友元函数
	类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。如果要声明函数为一个类的友元，需要在类定义中该函数原型前使用关键字 friend，如下所示：
	class Box{
	   double width;
	public:
	   double length;
	   friend void printWidth( Box box );
	   void setWidth( double wid );
	};
	声明类 ClassTwo 的所有成员函数作为类 ClassOne 的友元，需要在类 ClassOne 的定义中放置如下声明：
		friend class ClassTwo;

内联函数
	inline:内联函数是通常与类一起使用。如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 inline，在调用函数之前需要对函数进行定义。如果已定义的函数多于一行，编译器会忽略 inline 限定符。在类定义中的定义的函数都是内联函数，即使没有使用 inline 说明符。

this 指针
	在 C++ 中，this 指针是一个特殊的指针，它指向当前对象的实例。每一个对象都能通过 this 指针来访问自己的地址。
	this是一个隐藏的指针，可以在类的成员函数中使用，它可以用来指向调用对象。当一个对象的成员函数被调用时，编译器会隐式地传递该对象的地址作为 this 指针。
	友元函数没有 this 指针，因为友元不是类的成员，只有成员函数才有 this 指针。

